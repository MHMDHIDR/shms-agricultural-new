datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserType {
    admin
    user
}

enum UserStatus {
    active
    block
    pending
}

enum ProjectStatus {
    pending
    active
}

type Stocks {
    id               String
    stocks           Int
    newPercentage    Int
    percentageCode   String
    createdAt        DateTime
    capitalDeposited Boolean  @default(false)
    profitsDeposited Boolean  @default(false)
}

type ProjectImages {
    imgDisplayName String
    imgDisplayPath String
}

model Projects {
    id                           String          @id @default(auto()) @map("_id") @db.ObjectId
    projectImages                ProjectImages[]
    projectStudyCase             ProjectImages[]
    projectStudyCaseVisibility   Boolean         @default(false)
    projectName                  String
    projectLocation              String
    projectStartDate             DateTime
    projectEndDate               DateTime
    projectInvestDate            DateTime
    projectProfitsCollectDate    DateTime
    projectAvailableStocks       Int
    projectTotalStocks           Int
    projectStockPrice            Int
    projectSpecialPercentage     Int?
    projectSpecialPercentageCode String?
    projectStockProfits          Int
    projectDescription           String
    projectTerms                 String?
    updateImg                    Boolean?
    updatePercentage             Boolean?
    projectAdded                 Int?
    projectDeleted               Int?
    projectUpdated               Int?
    message                      String?
    projectStatus                ProjectStatus   @default(pending)

    @@map("projects")
}

model User {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    sn                Int                @default(0)
    name              String
    nationality       String
    dateOfBirth       DateTime
    address           String             @default("لم يتم إدخال العنوان")
    email             String             @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    password          String
    phone             String
    doc               String
    userStocks        Stocks[]
    userStockLimit    Int                @default(20)
    userCredits       Int                @default(0)
    userAccountType   UserType           @default(user)
    userAccountStatus UserStatus         @default(active)
    userResetToken    String?
    userIsDeleted     Boolean            @default(false)
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    withdrawActions   withdraw_actions[] @relation("UserWithdrawActions")

    @@map("users")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model withdraw_actions {
    id                          String   @id @default(auto()) @map("_id") @db.ObjectId
    created_at                  DateTime @default(now())
    user_id                     String   @db.ObjectId
    withdraw_amount             Int      @default(0)
    action_type                 String   @default("withdraw")
    accounting_operation_status String   @default("pending")
    message                     String?
    withdrawAdded               Int?
    withdrawUpdated             Int?
    user                        User     @relation(fields: [user_id], references: [id], name: "UserWithdrawActions") // Child side

    @@map("withdraw_actions")
}

enum SocialType {
    facebook
    x
    instagram
    youtube
}

model SocialLinks {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    social_link String
    social_type SocialType

    @@map("social_links")
}
